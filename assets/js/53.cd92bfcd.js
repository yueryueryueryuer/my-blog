(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{413:function(v,_,t){"use strict";t.r(_);var l=t(27),s=Object(l.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"操作系统基本原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#操作系统基本原理"}},[v._v("#")]),v._v(" 操作系统基本原理")]),v._v(" "),t("p",[v._v("操作系统的主要功能是进行处理机与进程管理、存储管理、设备管理、文件管理和作业管理的工作")]),v._v(" "),t("h2",{attrs:{id:"进程管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程管理"}},[v._v("#")]),v._v(" 进程管理")]),v._v(" "),t("p",[v._v("处理机是计算机系统的核心资源。操作系统的功能之一就是处理机管理。\n进程是处理机管理中最基本的、最重要的概念。处理机管理也被成为进程管理。\n进程（process）是资源分配和独立运行的基本单位。\n研究操作系统的进程，实质上是研究系统中诸进程的并发特性和相互制约性。")]),v._v(" "),t("h3",{attrs:{id:"进程的定义及分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程的定义及分类"}},[v._v("#")]),v._v(" 进程的定义及分类")]),v._v(" "),t("p",[v._v("进程的"),t("strong",[v._v("定义")]),v._v("：")]),v._v(" "),t("p",[v._v("是程序的一次执行，该程序可以和其他程序并发执行。")]),v._v(" "),t("p",[v._v("进程通常由"),t("strong",[v._v("程序、数据、进程控制块")]),v._v("（Process Control Block，PCB）组成。PCB 描述了进程的基本情况，是进程存在的"),t("strong",[v._v("唯一标识")]),v._v("。")]),v._v(" "),t("p",[v._v("进程按照"),t("strong",[v._v("性质不同分类")]),v._v("：")]),v._v(" "),t("ul",[t("li",[v._v("系统进程和用户进程")]),v._v(" "),t("li",[v._v("父进程和子进程")])]),v._v(" "),t("h3",{attrs:{id:"进程的状态转换与控制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程的状态转换与控制"}},[v._v("#")]),v._v(" 进程的状态转换与控制")]),v._v(" "),t("p",[v._v("进程的"),t("strong",[v._v("状态")]),v._v("：")]),v._v(" "),t("ul",[t("li",[v._v("就绪")]),v._v(" "),t("li",[v._v("运行")]),v._v(" "),t("li",[v._v("阻塞")])]),v._v(" "),t("img",{attrs:{src:v.$withBase("/img/系统架构设计师/操作系统/进程三态模型.png")}}),v._v(" "),t("img",{attrs:{src:v.$withBase("/img/系统架构设计师/操作系统/进程五态模型.png")}}),v._v(" "),t("h3",{attrs:{id:"进程的互斥与同步及-p、v-操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程的互斥与同步及-p、v-操作"}},[v._v("#")]),v._v(" 进程的互斥与同步及 P、V 操作")]),v._v(" "),t("p",[v._v("进程的"),t("strong",[v._v("同步")]),v._v("：")]),v._v(" "),t("p",[v._v("异步环境下各进程按照一定的顺序和速度执行。")]),v._v(" "),t("p",[v._v("进程的"),t("strong",[v._v("互斥")]),v._v("：")]),v._v(" "),t("p",[v._v("临界资源在某一个时刻只能被一个进程访问。")]),v._v(" "),t("p",[v._v("临界资源的"),t("strong",[v._v("定义")]),v._v("：")]),v._v(" "),t("p",[v._v("系统中资源一次只能供一个进程使用，被称为临界资源，如打印机、磁带机、输入机等。")]),v._v(" "),t("p",[v._v("临界区的"),t("strong",[v._v("定义")]),v._v("：")]),v._v(" "),t("p",[v._v("进程中对临界资源进行操作的那段程序。")]),v._v(" "),t("p",[v._v("临界区的"),t("strong",[v._v("管理原则")]),v._v("：")]),v._v(" "),t("ol",[t("li",[v._v("有空即进：无进程处于临界区时，若有进程要求进入则立即允许其进入")]),v._v(" "),t("li",[v._v("无空则等：有进程处于临界区时，若有进程要求进入必须让其等待，保证进程互斥的进入临界区")]),v._v(" "),t("li",[v._v("有限等待：对要求访问临界资源的进程，应保证在有限时间内能进入临界区，避免“死等”")]),v._v(" "),t("li",[v._v("让权等待：对于等待进入临界区的进程，必须释放其占有的 CPU")])]),v._v(" "),t("p",[v._v("信号量：")]),v._v(" "),t("p",[v._v("是一个整型变量，根据控制对象的不同赋不同的值。")]),v._v(" "),t("ul",[t("li",[v._v("公用信号量：实现进程的互斥，初值=1 或资源的数目")]),v._v(" "),t("li",[v._v("私有信号量：实现进程的同步，初值=0 或某个正整数")])]),v._v(" "),t("p",[v._v("信号量 S 的"),t("strong",[v._v("物理意义")]),v._v("：")]),v._v(" "),t("ul",[t("li",[v._v("S >= 0，某资源的可用数")]),v._v(" "),t("li",[v._v("S < 0，其绝对值表示阻塞队列中等待该资源的进程数")])]),v._v(" "),t("p",[v._v("对信号量只能施加特殊的操作：P 操作和 V 操作。P 操作和 V 操作是不可分割的原子操作，也成为原语。")]),v._v(" "),t("ul",[t("li",[v._v("P 操作代表申请一个资源")]),v._v(" "),t("li",[v._v("V 操作代表释放一个资源")])]),v._v(" "),t("p",[t("strong",[v._v("P 操作的定义")]),v._v("：")]),v._v(" "),t("p",[v._v("S = S - 1 ，若 S >= 0，则执行 P 操作的进程继续执行，若 S < 0，则执行 P 操作的进程进入阻塞状态，并将其插入进阻塞队列。")]),v._v(" "),t("p",[t("strong",[v._v("V 操作的定义")]),v._v("：")]),v._v(" "),t("p",[v._v("S = S + 1 ，若 S > 0，则执行 V 操作的进程继续执行，若 S <= 0，则从阻塞队列中唤醒一个进程，并将其插入就绪队列，并执行 V 操作的进程继续执行。")]),v._v(" "),t("p",[v._v("利用 "),t("strong",[v._v("P、V 操作实现进程的互斥")]),v._v("：")]),v._v(" "),t("p",[v._v("令信号量 mutex 的初值为 1，进临界区时执行 P 操作，退出临界区时执行 V 操作")]),v._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[v._v("P "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v("mutex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v("\n临界区\nV "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v("mutex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v("\n")])])]),t("h3",{attrs:{id:"进程通信与管程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程通信与管程"}},[v._v("#")]),v._v(" 进程通信与管程")]),v._v(" "),t("p",[t("strong",[v._v("进程通信")]),v._v("：")]),v._v(" "),t("p",[v._v("通信是指进程间的信息交换")]),v._v(" "),t("ul",[t("li",[v._v("控制信息的交换：低级通信，进程的同步和互斥是通过信息量来实现通信的，属于低级信息")]),v._v(" "),t("li",[v._v("数据的交换：高级通信，高级通信有共享存储系统和信息传递系统和管道通信。高级通信方式有直接通信和简介通信")])]),v._v(" "),t("p",[t("strong",[v._v("管程")]),v._v("：")]),v._v(" "),t("p",[v._v("一种同步机制，管程是由一些共享数据、一组能为并发进程执行的作用在共享数据上的操作的集合、初始代码以及存取权组成的，也即共享数据在其上操作的一组过程就构成了管程。进程可在任何需要资源的时候调用管程，且在任何时刻最多只有一个进程能真正进入管程。")]),v._v(" "),t("h3",{attrs:{id:"进程调度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程调度"}},[v._v("#")]),v._v(" 进程调度")]),v._v(" "),t("p",[v._v("进程调度即处理器调度（又称上下文转换），"),t("strong",[v._v("主要功能")]),v._v("是确定处理器在什么时候分配个哪一个进程")]),v._v(" "),t("p",[t("strong",[v._v("引起进程调度的原因")]),v._v("：")]),v._v(" "),t("ol",[t("li",[v._v("正在执行的进程执行完毕")]),v._v(" "),t("li",[v._v("执行中的进程自己调用阻塞原语将自己阻塞起来进入睡眠状态")]),v._v(" "),t("li",[v._v("执行中的进程调用了 P 原语操作，从而因资源不足而阻塞，或调用了 V 原语操作，唤醒了等待资源的进程队列")]),v._v(" "),t("li",[v._v("在分时系统中，当一个进程用完了时间片")]),v._v(" "),t("li",[v._v("就绪队列中某进程的优先级变得高于当前执行中进程的优先级")])]),v._v(" "),t("p",[t("strong",[v._v("调度方式")]),v._v("：")]),v._v(" "),t("p",[v._v("当优先级更高的进程到来时如何分配 CPU。")]),v._v(" "),t("ul",[t("li",[v._v("可剥夺：当就绪队列中有进程优先级高于当前执行的进程优先级时，立即发生进程调度，转让处理器")]),v._v(" "),t("li",[v._v("不可剥夺：一旦一个进程占用了处理器，别的进程就不能剥夺处理器，直到该进程因自己调用原语操作而进入阻塞状态，或时间片用完让出处理器")])]),v._v(" "),t("p",[t("strong",[v._v("调度算法")]),v._v(":")]),v._v(" "),t("ul",[t("li",[v._v("先来先服务（First Come And First Serverd，FCFS）：又称先进先出服务（First In And First Out，FIFO），按照就绪队列先来后到排列")]),v._v(" "),t("li",[v._v("时间片轮转（Round Robin）：就绪队列按 FCFS 排列，每个进程执行一次占用的处理器时间不得超过时间片，若超过，自行释放占用的处理器并排在就绪队列最后，等待下一次调度")]),v._v(" "),t("li",[v._v("优先级调度：就绪队列按优先级排列，有两种确定优先级的方法，静态优先级和动态优先级，静态优先级在进程执行前确定，执行过程中不变；动态优先级则可以在进程执行过程中改变")]),v._v(" "),t("li",[v._v("多级反馈调度：按优先级分多个队列，每个队列中按照 FCFS 分配时间片调度，当前队列时间片用完后还未完成则进入下一列队，当有优先级更高的进程到来时，当前正在运行的进程放到当前队列的队尾，处理机分给高优先级的进程")])]),v._v(" "),t("h3",{attrs:{id:"死锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#死锁"}},[v._v("#")]),v._v(" 死锁")]),v._v(" "),t("p",[v._v("死锁的"),t("strong",[v._v("概念")]),v._v("：")]),v._v(" "),t("p",[v._v("两个及以上的进程因为互相请求对方已占用的资源，无限期的等待并无法继续运行下去的现象")]),v._v(" "),t("p",[v._v("死锁、饥饿、死循环的"),t("strong",[v._v("区别")]),v._v("：")]),v._v(" "),t("ul",[t("li",[v._v("死锁：至少两个进程才能发生死锁，死锁进程处于阻塞状态")]),v._v(" "),t("li",[v._v("饥饿：资源分配不同导致某些进程在不发生死锁的情况下长期等待，当等待时间给进程推进和相应带来明显影响时，被称为进程饥饿，饥饿进程可能阻塞也可能就绪")]),v._v(" "),t("li",[v._v("死循环：可能只有一个进程进入死循环，死循环的进程可以上处理机")])]),v._v(" "),t("blockquote",[t("p",[v._v("死锁和饥饿是操作系统要解决的问题，死循环是程序员要解决的问题")])]),v._v(" "),t("p",[v._v("死锁产生的"),t("strong",[v._v("四个必要条件")]),v._v("：")]),v._v(" "),t("ol",[t("li",[v._v("互斥条件：对必须互斥使用的资源争夺才可能发生死锁")]),v._v(" "),t("li",[v._v("不剥夺条件：进程保持的资源只能主动释放，不能强行剥夺")]),v._v(" "),t("li",[v._v("请求和保持条件：保持某些资源不释放的同时，请求别的资源")]),v._v(" "),t("li",[v._v("循环等待条件：存在一种进程资源的循环等待链，循环等待不一定死锁，死锁一定循环等待")])]),v._v(" "),t("p",[v._v("死锁产生的"),t("strong",[v._v("原因")]),v._v("：")]),v._v(" "),t("p",[v._v("对不可剥夺资源的不合理分配")]),v._v(" "),t("p",[v._v("死锁的"),t("strong",[v._v("处理策略")]),v._v("：")]),v._v(" "),t("ol",[t("li",[v._v("预防死锁：破坏死锁产生的四个必要条件")]),v._v(" "),t("li",[v._v("避免死锁：避免系统进入不安全状态，例如先执行银行家算法。精心分配资源。")]),v._v(" "),t("li",[v._v("死锁发生后的检测和解除：允许死锁发生，系统负责检出死锁并解除")])]),v._v(" "),t("blockquote",[t("p",[v._v("系统出现死锁几率很小，死锁发生后的检测和解除比避免死锁的代价要小")])]),v._v(" "),t("h3",{attrs:{id:"线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程"}},[v._v("#")]),v._v(" 线程")]),v._v(" "),t("p",[v._v("线程是进程中的一个实体，是被系统独立分配和调度的基本单位。同一个进程中的所有线程共享该进程中的所有资源，同一个进程中的线程可并发执行，线程也有就绪、运行、阻塞三个状态")]),v._v(" "),t("h2",{attrs:{id:"存储管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#存储管理"}},[v._v("#")]),v._v(" 存储管理")]),v._v(" "),t("p",[v._v("存储器是计算机系统的关键资源，是存放各种信息的主要场所。存储器的发展方式是高速、大容量、小体积。存储管理的主要任务是提高主存的利用率、扩充主存以及对主存信息实现有效保护。存储管理的对象是主存储器。")]),v._v(" "),t("p",[t("strong",[v._v("存储器结构")]),v._v("：")]),v._v(" "),t("ul",[t("li",[v._v("寄存器——主存——外存")]),v._v(" "),t("li",[v._v("寄存器——缓存——主存——外存")])]),v._v(" "),t("img",{attrs:{src:v.$withBase("/img/系统架构设计师/操作系统/存储器的层次结构.png")}}),v._v(" "),t("p",[t("strong",[v._v("术语")]),v._v("：")]),v._v(" "),t("ul",[t("li",[v._v("逻辑地址（相对地址、程序地址、虚拟地址）：用户程序经编译后，每个目标模块以 0 为基地址进行顺序编址，它不是主存中的真实地址，是相对于基地址而言的")]),v._v(" "),t("li",[v._v("物理地址（绝对地址）：主存中各存储单元的地址，从统一的基地址进行顺序编址，是主存中的真实地址，可以寻址并实际存在")]),v._v(" "),t("li",[v._v("存储空间：逻辑地址空间（地址空间）是逻辑地址的集合，物理地址空间（存储空间）是物理地址的集合")])]),v._v(" "),t("p",[t("strong",[v._v("地址重定位")]),v._v("：")]),v._v(" "),t("p",[v._v("程序的逻辑地址被转换为主存的物理地址的过程被称为地址重定位。")]),v._v(" "),t("p",[v._v("地址重定位有两种方式。")]),v._v(" "),t("ul",[t("li",[v._v("静态重定位：在程序执行之前重定位，即装入内存时重定位")]),v._v(" "),t("li",[v._v("动态重定位：在程序执行期间，每次存储访问之前重定位")])]),v._v(" "),t("p",[t("strong",[v._v("功能")]),v._v("：")]),v._v(" "),t("p",[v._v("主存储器的分配和回收、提高主存储器的利用率、存储保护、主存扩容")]),v._v(" "),t("p",[t("strong",[v._v("方式")]),v._v("：")]),v._v(" "),t("p",[v._v("分区存储管理、分页存储管理、分段存储管理、段页式存储管理、虚拟存储管理。")]),v._v(" "),t("h2",{attrs:{id:"设备管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设备管理"}},[v._v("#")]),v._v(" 设备管理")]),v._v(" "),t("p",[v._v("在计算机系统中，输入/输出（I/O）设备、辅存设备、终端设备等被称为外部设备，它们是计算机系统与外界交互的工具，负责计算机与外部的输入输出工作。")]),v._v(" "),t("p",[v._v("设备管理的"),t("strong",[v._v("任务")]),v._v("：")]),v._v(" "),t("p",[v._v("保证在多道程序环境下，多个进程竞争使用设备时，按一定政策分配和管理各种设备，控制设备的各项操作，完成输入/输出设备和主存之间的数据交换")]),v._v(" "),t("p",[v._v("设备管理的"),t("strong",[v._v("目标")]),v._v("：")]),v._v(" "),t("p",[v._v("提高设备利用率，为用户提供方便统一的界面")]),v._v(" "),t("p",[v._v("设备管理的"),t("strong",[v._v("主要功能")]),v._v("：")]),v._v(" "),t("p",[v._v("动态的掌握并记录设备的状态、设备分配和释放、缓冲区管理、实现物理输入/输出设备的操作、提供设备使用的用户接口、设备访问和控制、输入/输出缓冲和调度")]),v._v(" "),t("p",[v._v("设备的"),t("strong",[v._v("分类")]),v._v("：")]),v._v(" "),t("ul",[t("li",[v._v("按设备使用特性：存储设备、输入/输出设备、终端设备、脱机设备")]),v._v(" "),t("li",[v._v("按资源分配角度：独占设备、共享设备、虚拟设备")]),v._v(" "),t("li",[v._v("按设备从属关系：系统设备、用户设备")]),v._v(" "),t("li",[v._v("按数据组织方式：块设备（Block Device）、字符设备（Character Device）")]),v._v(" "),t("li",[v._v("按数据传输速率：低速设备、中速设备、高速设备")]),v._v(" "),t("li",[v._v("按输入/输出设备：人机通信设备、机机通信设备")]),v._v(" "),t("li",[v._v("按是否可交互：非交互设备、交互设备")])]),v._v(" "),t("p",[v._v("设备管理"),t("strong",[v._v("主要技术")]),v._v("：")]),v._v(" "),t("ul",[t("li",[v._v("中断技术：使 CPU 中止正在执行的程序而转去处理特殊事件的操作")]),v._v(" "),t("li",[v._v("DMA 技术（Direct Memory Access，直接存储器访问）：允许不同速度的硬件装置来沟通，不需要依赖 CPU 大量中断负载")]),v._v(" "),t("li",[v._v("缓冲技术：协调吞吐速度相差很大的设备之间数据传送而采用的技术")]),v._v(" "),t("li",[v._v("虚设备与 SPOOLING 技术（simultaneous peripheral operations online，外围设备联机技术）：低速输入/输出设备与主机交换的一种技术")])]),v._v(" "),t("p",[v._v("设备管理"),t("strong",[v._v("软件")]),v._v("：")]),v._v(" "),t("ul",[t("li",[v._v("中断处理程序")]),v._v(" "),t("li",[v._v("设备驱动程序")]),v._v(" "),t("li",[v._v("与设备无关的系统软件")]),v._v(" "),t("li",[v._v("用户层 I/O 软件")])]),v._v(" "),t("p",[t("strong",[v._v("数据传输控制方式")]),v._v("：")]),v._v(" "),t("ul",[t("li",[v._v("程序控制方式：处理器启动数据传输，然后等设备完成")]),v._v(" "),t("li",[v._v("中断方式：数据传输完成后，设备控制器产生中断请求")]),v._v(" "),t("li",[v._v("直接存储访问方式（DMA）：外部设备和内存之间开辟的直接数据交换通路")]),v._v(" "),t("li",[v._v("通道方式：通道又称为输入/输出处理器(Input/Output Processor，IOP)，通过自身输入/输出专用程序进行内存和外设之间的数据传输。主要有三种传输通道：\n"),t("ol",[t("li",[v._v("字节多路通道")]),v._v(" "),t("li",[v._v("选择通道")]),v._v(" "),t("li",[v._v("成组多路通道")])])])]),v._v(" "),t("p",[t("strong",[v._v("磁盘调度算法")]),v._v("：")]),v._v(" "),t("p",[v._v("磁盘是可供多个进程共享的设备。磁盘调度使各进程对磁盘的平均访问时间最小。")]),v._v(" "),t("p",[v._v("常用的磁盘调度算法：")]),v._v(" "),t("ul",[t("li",[v._v("先来先服务（First Come Fisrt Serverd，FCFS）")]),v._v(" "),t("li",[v._v("最短寻道时间优先（Shortest Seek Time First，SSTF）")]),v._v(" "),t("li",[v._v("扫描算法（SCAN）")])]),v._v(" "),t("h2",{attrs:{id:"文件管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#文件管理"}},[v._v("#")]),v._v(" 文件管理")]),v._v(" "),t("p",[v._v("文件是具有符号名的、在逻辑上具有完整意义的一组相关信息项的集合。文件名的格式和长度因系统而异，操作系统根据文件名对其进行控制和管理。")]),v._v(" "),t("p",[v._v("文件管理系统是操作系统中对文件进行统一管理的一组软件和相关数据的集合，简称文件系统。")]),v._v(" "),t("p",[v._v("文件系统的功能按名存取、统一用户接口、并发访问和控制、安全性控制、优化性能、差错恢复。")]),v._v(" "),t("p",[v._v("操作系统对计算机的管理包括两个方面：")]),v._v(" "),t("ul",[t("li",[v._v("硬件资源：主要解决硬件资源的有效和合理利用问题\n"),t("ul",[t("li",[v._v("CPU 的管理")]),v._v(" "),t("li",[v._v("存储器的管理")]),v._v(" "),t("li",[v._v("设备管理")]),v._v(" "),t("li",[v._v("...")])])]),v._v(" "),t("li",[v._v("软件资源：每一种软件资源本身都是具有一定逻辑意义的相关信息的集合，在操作系统中它们以文件的形式存储\n"),t("ul",[t("li",[v._v("各种系统程序")]),v._v(" "),t("li",[v._v("各种应用程序")]),v._v(" "),t("li",[v._v("各种用户程序")]),v._v(" "),t("li",[v._v("大量文档材料、库函数")]),v._v(" "),t("li",[v._v("...")])])])]),v._v(" "),t("p",[v._v("文件系统是组织、存取、保护数据的一个重要部分")]),v._v(" "),t("p",[v._v("文件管理的"),t("strong",[v._v("功能")]),v._v("：")]),v._v(" "),t("ul",[t("li",[v._v("建立、修改、删除文件")]),v._v(" "),t("li",[v._v("按文件名访问文件")]),v._v(" "),t("li",[v._v("决定文件信息的存放位置、存放形式及存取权限")]),v._v(" "),t("li",[v._v("管理文件间的联系及提供对文件的共享、保护和保密等")])]),v._v(" "),t("p",[v._v("文件的"),t("strong",[v._v("共享")]),v._v("：")]),v._v(" "),t("ul",[t("li",[v._v("一个文件可以让多个用户共同使用，减少用户的重复性劳动，节省文件的存储空间，减少输入/输出文件的次数等")])]),v._v(" "),t("p",[v._v("文件的"),t("strong",[v._v("保护")]),v._v("：")]),v._v(" "),t("ul",[t("li",[v._v("防止由于错误操作而对文件造成的破坏")])]),v._v(" "),t("p",[v._v("文件的"),t("strong",[v._v("保密")]),v._v("：")]),v._v(" "),t("ul",[t("li",[v._v("防止未经授权的用 户对文件进行访问。")])]),v._v(" "),t("p",[v._v("文件的访问方法是指读写文件存储设备上的一个物理块的方法。")]),v._v(" "),t("blockquote",[t("p",[v._v("文件的保护、保密实际上是用户对文件的存取权限控制问题")])]),v._v(" "),t("p",[v._v("文件的"),t("strong",[v._v("存取设置两级控制")]),v._v("：")]),v._v(" "),t("ul",[t("li",[v._v("第 1 级是访问者的识别，即规定哪些人可以访问")]),v._v(" "),t("li",[v._v("第 2 级是存取权限的识别，即有权参与访问者可对文件执行何种操作")])]),v._v(" "),t("p",[v._v("文件的"),t("strong",[v._v("类型")]),v._v("：")]),v._v(" "),t("ul",[t("li",[v._v("按文件性质能用途：系统文件、库文件、用户文件")]),v._v(" "),t("li",[v._v("按文件的安全属性：只读文件、读写文件、可执行文件、不保护文件")]),v._v(" "),t("li",[v._v("按文件的组织形式：普通文件、目录文件、设备文件")]),v._v(" "),t("li",[v._v("按信息保存的期限：临时文件、档案文件、永久文件")]),v._v(" "),t("li",[v._v("按信息流向：输入文件、输出文件、输入/输出文件")])]),v._v(" "),t("h3",{attrs:{id:"文件的逻辑结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#文件的逻辑结构"}},[v._v("#")]),v._v(" 文件的逻辑结构")]),v._v(" "),t("p",[v._v("文件的结构是指文件的组织形式，从用户角度所看到的文件组织形式，称为文件的逻辑结构。")]),v._v(" "),t("ol",[t("li",[v._v("无结构的字符流文件")]),v._v(" "),t("li",[v._v("有结构的记录文件\n"),t("ul",[t("li",[v._v("顺序文件：大多数文件是顺序文件，顺序文件常用于批处理应用，对于查询或更新某个记录的处理性能不太好")]),v._v(" "),t("li",[v._v("索引顺序文件：索引顺序文件是基于键的约定次序组织的，而且维护键的索引和溢出区域。键的索引也可以是多级索引。索引顺序文件既适用于交互方式应用，也适用于批处理方式应用")]),v._v(" "),t("li",[v._v("索引文件：索引文件是基于记录的一个键数据项组织的。索引文件本身是顺序文件组织")]),v._v(" "),t("li",[v._v("直接文件：直接文件又称哈希（Hash）文件。记录以它们在直接访问存储设备上的物理地址直接（随机地）访问。直接文件常用于需要高速访问文件而且每次仅访问一条记录的应用中。")])])])]),v._v(" "),t("h3",{attrs:{id:"文件的物理结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#文件的物理结构"}},[v._v("#")]),v._v(" 文件的物理结构")]),v._v(" "),t("p",[v._v("文件的物理结构是指文件在存储设备上的存放方法。\n文件的存储设备通常划分为大小相同的物理块，物理块是分配和传输信息的基本单位。\n文件的物理结构涉及文件存储设备的组块策略和文件分配策略，决定文件信息在存储设备上的存储位置。")]),v._v(" "),t("p",[v._v("文件的"),t("strong",[v._v("分配策略")]),v._v("：")]),v._v(" "),t("ol",[t("li",[v._v("顺序分配（连续分配）：这是最简单的分配方法。这种分配方法适合于顺序存取，在连续存取相邻信息时，存取速度快。其缺点是在文件建立时必须指定文件的信息长度，以后不能动态增长，一般不宜用于需要经常修改的文件。")]),v._v(" "),t("li",[v._v("链接分配(串联分配)：这是按单个物理块逐个进行的。链接分配的优点是可以解决存储器的碎片问题，提高存储空间利用率。由于链接文件只能按照队列中的链接指针顺序查找，因此搜索效率低，一般只适用于顺序访问，不适用于随机存取。")]),v._v(" "),t("li",[v._v("索引分配：这是另一种对文件存储不连续分配的方法。索引分配既可以满足文件动态增长的要求，又可以方便而迅速地实现随机存取。对一些大的文件，当索引表的大小超过一个物理块时，会发生索引表的分配问题。一般采用多级（间接索引）技术，这时在由索引表指出的物理块中存放的不是文件存放处而是存放文件信息的物理块地址。索引文件的优点是既适用于顺序存取，又适用于随机存取。缺点是索引表增加了存储空间的开销。另外，在存取文件时需要访问两次磁盘，一次是访问索引表，另一次是根据索引表提供的物理块号访问文件信息。为了提高效率，一种改进的方法是，在对某个文件进行操 作之前，预先把索引表调入内存。这样，文件的存取就能直接从内存的索引表中确定相应的物理块号，从而只需要访问一次磁盘")])]),v._v(" "),t("p",[v._v("UNIX 操作系统采用三级索引结构：")]),v._v(" "),t("img",{attrs:{src:v.$withBase("/img/系统架构设计师/操作系统/三级索引结构图.png")}}),v._v(" "),t("h3",{attrs:{id:"文件存储设备管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#文件存储设备管理"}},[v._v("#")]),v._v(" 文件存储设备管理")]),v._v(" "),t("p",[v._v("文件存储设备管理，就是操作系统要有效地进行存储空间的管理。")]),v._v(" "),t("p",[v._v("由于文件存储设备是分成许多大小相同的物理块，并以块为单位交换信息，因此，文件存储设备的管理实质上是对空闲块的组织和管理问题。它包括空闲块的组织，空闲块的分配与空闲块的回收等问题。")]),v._v(" "),t("ol",[t("li",[v._v("索引法：索引法把空闲块作为文件并采用索引技术")]),v._v(" "),t("li",[v._v("链接法：链接法使用链表把空闲块组织在一起，当申请者需要空闲块时，分配程序从链首开始摘取所需的空闲块。反之，管理程序把回收的空闲块逐个挂入队尾。")]),v._v(" "),t("li",[v._v("位示图法：该方法是在外存上建立一张位示图（Bitmap），记录文件存储器的使用情况。每一位仅对应文件存储器上的一个物理块，取值 0 和 1 分别表示空闲和占用。")])]),v._v(" "),t("h3",{attrs:{id:"树型目录结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#树型目录结构"}},[v._v("#")]),v._v(" 树型目录结构")]),v._v(" "),t("p",[v._v("在计算机的文件系统中，一般采用树型目录结构。在树型目录结构中，树的根结点为根目录，数据文件作为树叶，其他所有目录均作为树的结点。")]),v._v(" "),t("h2",{attrs:{id:"作业管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#作业管理"}},[v._v("#")]),v._v(" 作业管理")]),v._v(" "),t("ul",[t("li",[v._v("用户的角度：作业是系统为完成一个用户的计算任务（或一次事务处理）所做的工作总和")]),v._v(" "),t("li",[v._v("系统的角度：作业则是一个比程序更广的概念。它由程序、数据和作业说明书组成。系统通过作业说明书控制文件形式的程序和数据，使之执行和操作。而且，在批处理系统中，作业是占据内存的基本单位。")])]),v._v(" "),t("h3",{attrs:{id:"作业的方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#作业的方式"}},[v._v("#")]),v._v(" 作业的方式")]),v._v(" "),t("ul",[t("li",[v._v("联机方式：用户的作业可以通过直接的方式，由用户自己按照作业步顺序操作")]),v._v(" "),t("li",[v._v("脱机方式：用户的作业也可以通过间接的方式，由用户率先编写的作业步依次执行的说明，一次交给操作系统，由系统按照说明依次处理")])]),v._v(" "),t("h3",{attrs:{id:"作业状态及其转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#作业状态及其转换"}},[v._v("#")]),v._v(" 作业状态及其转换")]),v._v(" "),t("p",[v._v("一个作业从交给计算机系统到执行结束退出系统，一般都要经历提交、后备、执行和完成 4 个状态")]),v._v(" "),t("ol",[t("li",[v._v("提交状态：作业由输入设备进入外存储器（也称输入井）的过程称为提交状态。处于提交状态的作业，其信息正在进入系统。")]),v._v(" "),t("li",[v._v("后备状态。当作业的全部信息进入外存后，系统就为该作业建立一个作业控制块（Job Control Block，JCB）。系统通过 JCB 感知作业的存在。JCB 主要内容包括作业名、作业状态、资源要求、作业控制方式、作业类型及作业优先权等。")]),v._v(" "),t("li",[v._v("执行状态：一个后备作业被作业调度程序选中而分配了必要的资源并进入了内存，作业调度程序同时为其建立了相应的进程后，该作业就由后备状态变成了执行状态。")]),v._v(" "),t("li",[v._v("完成状态：当作业正常运行结束，它所占用的资源尚未全部被系统回收时的状态为完成状态。")])]),v._v(" "),t("img",{attrs:{src:v.$withBase("/img/系统架构设计师/操作系统/作业的状态及转换.png")}}),v._v(" "),t("h3",{attrs:{id:"用户接口-用户界面"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用户接口-用户界面"}},[v._v("#")]),v._v(" 用户接口（用户界面）")]),v._v(" "),t("ul",[t("li",[v._v("用户与操作系统交互的途径和通道，即操作系统的接口\n"),t("ul",[t("li",[v._v("命令接口\n"),t("ul",[t("li",[v._v("键盘命令")]),v._v(" "),t("li",[v._v("作业控制命令")])])]),v._v(" "),t("li",[v._v("程序接口（编程接口、系统调用）\n"),t("ul",[t("li",[v._v("编程接口：程序经编程接口请求系统 服务，即通过系统调用程序与操作系统通信")]),v._v(" "),t("li",[v._v("系统调用：是操作系统提供给编程人员的唯一接口。系统调用对用户屏蔽了操作系统的具体动作而只提供有关功能。系统调用大致分为设备管理、文件管理、进程控制、进程通信和存储管理等。")])])])])]),v._v(" "),t("li",[v._v("这种交互环境的控制方式，即操作环境\n"),t("ul",[t("li",[v._v("操作环境支持命令接口和程序接口，提供友好的、易用的操作平台。操作系统的交互界面已经从早期的命令驱动方式，发展到菜单驱动方式、图符驱动方式和视窗操作环境。")])])])])])}),[],!1,null,null,null);_.default=s.exports}}]);